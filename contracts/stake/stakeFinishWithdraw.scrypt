import "../txUtil.scrypt";
import "stakeProto.scrypt";
import "../uniqueProto.scrypt";
import "../token/tokenProto.scrypt";
import "stakeCommon.scrypt";
import "../MerkleTree.scrypt";
import "../blockHeight.scrypt";

// opreturn: stakeTokenHolderHash + stakeCodeHash
contract StakeFinishWithdraw {
    bytes stakeID;
    bytes tokenID;
    bytes tokenScriptCodeHash;
    Ripemd160 adminAddress;

    // max input num 6 * 36
    static const int MAX_PREVOUTS_LEN = 216;

    static const int stakeInputIndex = 1;
    static const int poolTokenInputIndex = 2;

    public function unlock(
        SigHashPreimage txPreimage,
        bytes prevouts,
        PubKey senderPubKey,
        Sig senderSig,
        // stake tx proof
        bytes stakeScript,
        TxOutputProof stakeTxProof,
        // pool token
        bytes poolTokenScript,
        TxOutputProof poolTokenTxProof,
        // block height
        BlockRabinData blockRabinData,
        // merkle
        bytes oldLeaf,
        bytes merklePath,
        // output
        int stakeOutputSatoshis,
        int poolTokenOutputSatoshis,
        Ripemd160 changeAddress,
        int changeSatoshis) {

        // check prevouts
        require(hash256(prevouts) == SigHash.hashPrevouts(txPreimage));
        require(len(prevouts) <= MAX_PREVOUTS_LEN);

        // getDataPart
        bytes lockingScript = SigHash.scriptCode(txPreimage);
        StakeContractData contractData = StakeProto.getOpContractData(lockingScript);

        // verify stake input
        bytes stakeOutpoint = prevouts[stakeInputIndex * TxUtil.OUTPOINT_LEN: (stakeInputIndex + 1) * TxUtil.OUTPOINT_LEN];
        TxOutputProof stakeProof = {stakeTxProof.txHeader, stakeTxProof.hashProof, stakeTxProof.satoshiBytes, sha256(stakeScript)};
        TxUtil.verifyTxOutput(stakeProof, stakeOutpoint);

        int stakeScriptLen = len(stakeScript);
        require(this.stakeID == UniqueProto.getUniqueID(stakeScript, stakeScriptLen));

        StakeInfo stakeInfo = StakeCommon.checkStakeInput(stakeScript, this.stakeID, contractData.stakeContractCodeHash);

        // verify pool token input
        int poolTokenScriptLen = len(poolTokenScript);
        bytes poolTokenOutpoint = prevouts[poolTokenInputIndex * TxUtil.OUTPOINT_LEN: (poolTokenInputIndex + 1) * TxUtil.OUTPOINT_LEN];
        TxOutputProof poolTokenProof = {poolTokenTxProof.txHeader, poolTokenTxProof.hashProof, poolTokenTxProof.satoshiBytes, sha256(poolTokenScript)};
        TxUtil.verifyTxOutput(poolTokenProof, poolTokenOutpoint);
        require(this.tokenID == TokenProto.getTokenID(poolTokenScript, poolTokenScriptLen));
        require(this.tokenScriptCodeHash == TokenProto.getScriptCodeHash(poolTokenScript, poolTokenScriptLen));

        // verify blockNum rabin msg
        int curBlockTime = StakeCommon.verifyBlockRabinMsg(stakeScript, prevouts, stakeInputIndex, blockRabinData, stakeInfo.lastRewardTime);

        // verify sig
        require(checkSig(senderSig, senderPubKey));
        bytes senderAddress = hash160(senderPubKey);

        LeafData data = StakeCommon.getLeafData(oldLeaf);
        // admin could withdraw token to user address
        if (data.address != senderAddress) {
            require(senderAddress == this.adminAddress);
            senderAddress = data.address;
        }

        // updatePool
        int newAccPoolPerShare = StakeCommon.updatePool(stakeInfo, curBlockTime);

        WithdrawExpiredRes withdrawRes = StakeCommon.withdrawExpiredTokens(data, curBlockTime);

        // update user data
        bytes newUserDataMerkleRoot = MerkleTree.updateLeaf(sha256(oldLeaf), sha256(withdrawRes.leafBytes), merklePath, stakeInfo.userDataMerkleRoot);

        // stake output
        int newUnlockingPoolTokenAmount = stakeInfo.unlockingPoolTokenAmount - withdrawRes.amount;
        bytes newStakeScript = StakeProto.getNewStakeScript(stakeScript, curBlockTime, stakeInfo.poolTokenAmount, newUnlockingPoolTokenAmount, newAccPoolPerShare, newUserDataMerkleRoot);
        bytes stakeOutput = Utils.buildOutput(newStakeScript, stakeOutputSatoshis);

        // user token output
        bytes tokenScript = TokenProto.getNewTokenScript(poolTokenScript, poolTokenScriptLen, senderAddress, withdrawRes.amount);
        bytes tokenOutput = Utils.buildOutput(tokenScript, poolTokenOutputSatoshis);

        // pool token output
        bytes poolTokenOutput = b'';
        int tokenInputAmount = TokenProto.getTokenAmount(poolTokenScript, poolTokenScriptLen);
        require(tokenInputAmount == stakeInfo.poolTokenAmount + stakeInfo.unlockingPoolTokenAmount);
        int newTokenAmount = tokenInputAmount - withdrawRes.amount;
        require(newTokenAmount >= stakeInfo.poolTokenAmount);
        if (newTokenAmount > 0) {
            bytes newPoolScript = TokenProto.getNewTokenScript(poolTokenScript, poolTokenScriptLen, contractData.stakeTokenHolderHash, newTokenAmount);
            poolTokenOutput = Utils.buildOutput(newPoolScript, poolTokenOutputSatoshis);
        }

        bytes changeOutput = TxUtil.genMvcOutput(changeSatoshis, changeAddress);

        bytes outputs = stakeOutput + tokenOutput + poolTokenOutput + changeOutput;

        require(hash256(outputs) == SigHash.hashOutputs(txPreimage));

        require(Tx.checkPreimageOCS(txPreimage));
    }
}
