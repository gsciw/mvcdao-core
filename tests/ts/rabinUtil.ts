import { mvc } from "mvc-scrypt"
const Rabin = require('../../rabin/rabin')

const RabinUtils: any = {}

RabinUtils.toBufferLE = function(num, width) {
  const hex = num.toString(16);
  const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');
  buffer.reverse();
  return buffer;
}

RabinUtils.rabinPrivateKeys = [
  {
    "p": 95710409893817590390139663620366087275247408870842408333898219789050248281757245653962387186577011330413555521601303684960193661446529472595380568496662925717078463086455517438374035528795054110257771412467704924454096429331440714533978386632223042409454305192998811299899291186224795472049889580961886731292907368505099290699371972445350648299305194949955498966079496522896945905590774529349417838259757483085686639857637673528220491859752024165356945769688179n,
    "q": 850361483999592259194197904385613729225847080600107506453692692749565317225938190302437735634758241138444628410968946005140011938713710123917746213155365089324622574228924043794545051050702182655538958610595375336927418648927281663309451280457968105117464051777473418439580755116783253855845974554839203812079902631524368921329232372909802643698042593677933776895789908458900010987268214267756860213459255223762730848062269190843789517079066242842918728372101047n
  },
  {
    "p": 514130959413096539510620710812221458461066186191922456360304870526648516594373821848498252541366777028270121382578894440311555325172173053954123105540964434359367379107244621114010295504500024178460661564732278783638400392209173884402177293753944249440579628368347573641010690662412381736936332653212244081529173888172317848702493115550252859920880188261967674501158452619833003692963398722507143916027904289669433373041237166569600809214517213577484577543248363n,
    "q": 1859286171864535861956840710926737217632442629773530908450884489875994842504203927907064256734413769968221712753980430079027595837244715075590407273656121646183723234993347252542521523152204824497954917557376501974968155279949434715706343272408085922606599553140950053448561640466915281413870143732477897495472057526027305780672486572510218813484582630396582938374269333100769565734599388223495669370763007744645470476506703819474135947298714275072356448144260679n
  },
  {
    "p": 1311517873564721648993696661720680674433835527675110212235461207575730263803083561043656295528479053198850891292938258829963459377057524561183348302046220942138428316472562995733182421055725304626122128273951444961594321901042256933005209919304386476214488663835119483941894169925480831761930603976068765632542488225618265762292657420293589981403779167967155739821467260636137094644255000356570723544608683813612327244330115177656462148739306274700450570506100867n,
    "q": 856878102308847501877261609426672088906939582365484677471524161279688479969560078345225089421260014439039975890338797397935130756021684919763354490971126449034430455141767231257186963231261022503259531719095581661777685654586892276321774636537035265334227007691506065150518860857948758062892130363734478967327908771139745572741701079034605092780970350940295038281471700014096402841287466018110073585888695436816624923684156785365065401982209436166575055447877807n
  },
  {
    "p": 2368404975736808306097901492782000146880132136710052716879742338294756808885854239975415589945407098674271781604698782201056822663878260285093614565840976324412856845747505161223880092275810108235790050642793045047791725276059857454286069555500986775979917232727767151015517141555939805434762207056729138760613545569560009225442759140927480838980888834454946811972233611655833743541023764189739751873498603110024059922780832528085330376312931177984092425475163163n,
    "q": 994975132914447437549389319157999403287130073311351720805784494849274614367634734328332873886530109087634036094182686171112824397775608037758617491373425832507402977218477086979614948335473864135821126915040253009037286638833327349198767000402435197915547060669189604452877711887613287365868386961306588702838404996030223853759749387870250107701400977694239844772695596687722356064087858215434731021679186143413398079062515080836584412442298917950642057822845159n
  },
  {
    "p": 1648686191618120986314630128174284027721074593046978566316828680992497854297141491903682913507706882254873251861548910918583112204857948506020836962376676512806998133161666996650221312499022519320987232263506233713104904431698790207782898654633570463489129794717782090421254876673002955373299093614492616522659329183879803315342979228406085599989994364196957883207693526072888544796946144351196940074291783752118197246139134249460481800621765236033126433394308411n,
    "q": 1649188802415801035220148983605867905709063370499573898159343986518091208700316480774366832988537074349575752613244823989026136417333821897762086589144565307084900120966060266516493792670450144929344021800203719911977835716532207332651110550476658603669088500696097748575893598079820302124194186867893001217668716001401945842013999349215684017057666971467845656346022723285706330593630773607480733086288980005558288330622147927690003581781767310326596363473202383n
  },
]
RabinUtils.rabinPrivateKeys2 = Array(5).fill(RabinUtils.rabinPrivateKeys[0])
RabinUtils.rabinPubKeyLen = 384
RabinUtils.oracleNum = 5
RabinUtils.oracleVerifyNum = 3
RabinUtils.rabinPubKeyArray = []
for (const rabinPrivateKey of RabinUtils.rabinPrivateKeys) {
  RabinUtils.rabinPubKeyArray.push(Rabin.privKeyToPubKey(rabinPrivateKey.p, rabinPrivateKey.q))
}
RabinUtils.rabinPubKeyArray2 = []
for (const rabinPrivateKey of RabinUtils.rabinPrivateKeys2) {
  RabinUtils.rabinPubKeyArray2.push(Rabin.privKeyToPubKey(rabinPrivateKey.p, rabinPrivateKey.q))
}
RabinUtils.rabinPubKeyVerifyArray = []
RabinUtils.rabinPubKeyIndexArray = [0, 2, 4]
for (let i = 0; i < RabinUtils.oracleVerifyNum; i++) {
  RabinUtils.rabinPubKeyVerifyArray.push(RabinUtils.rabinPubKeyArray[RabinUtils.rabinPubKeyIndexArray[i]])
}
RabinUtils.rabinPubKeyHashArray = Buffer.alloc(0)
for (let i = 0; i < RabinUtils.oracleNum; i++) {
  RabinUtils.rabinPubKeyHashArray = Buffer.concat([
    RabinUtils.rabinPubKeyHashArray,
    mvc.crypto.Hash.sha256ripemd160(RabinUtils.toBufferLE(RabinUtils.rabinPubKeyArray[i], RabinUtils.rabinPubKeyLen))
  ])
}
RabinUtils.rabinPubKeyHashArrayHash = mvc.crypto.Hash.sha256ripemd160(RabinUtils.rabinPubKeyHashArray)

export { RabinUtils }